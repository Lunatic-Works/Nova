@<|
label('tut02', '教程2 图像')
is_start()
|>
<|
set_box()
|>
教程2 图像

<|
show(bg, 'room')
|>
`show`函数用来显示图片

`bg`是图片的controller在Lua中的名称

在Unity Editor的Hierarchy窗口里选中`Sprites/BackgroundImage`，在Inspector窗口的`SpriteController`里就能看到`luaGlobalName`是`bg`

图片所在的文件夹由`SpriteController`的`imageFolder`设置

`room`是这个文件夹中的图片文件名（这里不需要`.png`等后缀名）

顺便说一句：：把图片素材导入到Nova的方法详见[Wiki：背景图片导入](https://github.com/Lunatic-Works/Nova/wiki/Image-Import)

<|
show(fg, 'moon_halo', {2, 2, 0.5})
|>
可以同时显示多个图层，每个图层由一个game object控制。上面的`fg`对应的就是Hierarchy里的`ForegroundImage`

如果需要更多图层，可以在Unity Editor中复制更多的game object，并修改`luaGlobalName`

顺便说一句：：图层的顺序一般由z坐标决定。上面的`{2, 2}`是x、y坐标，马上就会讲到

<|
show(bg, 'corridor')
|>
对同一个图层再次使用`show`，则会替换当前的图片

Inspector中的`SpriteRenderer`的`sprite`会显示这个图层当前的图片

<|
hide(fg)
|>
`hide`函数用来隐藏图片

<|
move(bg, {1, 0})
|>
`move`函数用来移动图片

`{1, 0}`是图片的x、y坐标，可以在Inspector中的`Transform`里看到

<|
move(bg, {0, 1, 2})
|>
如果有第三个参数，则是缩放的倍数

Lua中的参数必须先省略前面的，再省略后面的。想要只省略前面的参数，可以用`nil`

<|
move(bg, {nil, -2, 0.5})
|>
`move`遇到省略的参数时，会保持之前的值。利用这一点可以避免把同一个坐标输很多遍，以至于修改的时候也要改很多遍

<|
move(bg, {nil, nil, {0.5, 2}})
|>
如果第三个参数是一个table，则会分别设置x、y方向的缩放（如果是三维模型，还可以设置z方向的缩放）

<|
move(bg, {0, 0, 1, 11, 30})
|>
顺便说一句：：如果还有第四、第五个参数，则是z坐标和绕z轴的旋转角度

<|
move(bg, {nil, nil, nil, nil, {60, 40, 20}})
|>
顺便说一句：：如果第五个参数是一个table，则会分别设置绕x、y、z轴的旋转

顺便说一句：：为了方便只有二维演出的作品，Nova脚本中的坐标的前三个参数是x、y、缩放，而不是x、y、z

顺便说一句：：摄像机的模式默认是orthographic，这时z坐标不会影响图片显示的大小，只会影响图层顺序

顺便说一句：：如果需要做三维演出，你可以把摄像机改成perspective，这时z坐标就会影响图片显示的大小

顺便说一句：：Unity的渲染顺序也不完全是由z坐标决定的，如果要仔细调整的话可以用render queue，这个以后再讲。。

<|
move(bg, {0, 0, 1, 10, 0})
show(fg, 'moon_halo')
|>
好了，把背景恢复正常，并且把`fg`显示出来

<|
tint(fg, {1, 0.5, 0})
|>
`tint`函数用来改变图片的颜色

原理是给图片的RGBA通道分别乘上一个0..1之间的系数，可以在Inspector中的`SpriteRenderer`的`color`里看到

顺便说一句：：乘上系数会让RGBA的数值变小，图片变暗，所以准备美术素材的时候可以画得亮一点

Nova脚本中的颜色用一个table表示，可以包括1..4个数值

<|
tint(fg, 0.5)
|>
1个数值：`r, g, b`均为该值，`a`为1，只改变明暗而不改变色调（这时可以不用table，只用一个数值）

<|
tint(fg, {1, 0.5})
|>
2个数值：`r, g, b`均为第一个值，`a`为第二个值

<|
tint(fg, {0, 0.5, 1})
|>
3个数值：`r, g, b`为这三个数值，`a`为1

<|
tint(fg, {0.5, 0, 1, 0.5})
|>
4个数值：`r, g, b, a`为这四个数值

<|
hide(fg)
move(fg, {0, 0, 1})
tint(fg, 1)
|>
好了，隐藏`fg`。如果接下来长时间用不到一个图层，最好把坐标和颜色恢复原状，以免下次用到的时候忘了

<|
show(bg, 'room', {1, 1}, {1, 0.5, 0})
|>
坐标和颜色也可以在`show`当中设置

<|
show(bg, 'corridor', nil, {0, 0.5, 1})
|>
如果省略则是保持之前的值

<|
show(bg, 'room', {0, 0}, 1)
|>
好了，把背景恢复正常

<|
show(gaotian, 'normal', {0, -0.3, 0.4})
|>
`show`也可以显示角色立绘，`gaotian`对应的就是Hierarchy里的`Characters/Gaotian`

角色立绘通常是由几个部件组合而成的，称为一个pose，上面的`normal`是pose的名称

所有角色的pose在`pose.lua`中定义

顺便说一句：：把立绘素材导入到Nova的方法详见[Wiki：立绘导入](https://github.com/Lunatic-Works/Nova/wiki/Standing-Import)

<|
show(gaotian, 'cry')
|>
改变一下立绘的表情

<|
show(gaotian, 'body+mouth_smile+eye_normal+eyebrow_normal+hair')
|>
也可以把pose字符串直接写在`show`里，调试完之后再写到`pose.lua`中

<|
show(gaotian, 'cry')
|>
立绘改变的时候默认有零点几秒的淡入淡出

<|
show(gaotian, 'normal')
|>
顺便说一句：：教程5会讲更复杂的动画

<|
move(gaotian, {-4, nil})
|>
`move`也可以移动立绘

<|
move(gaotian, pos_r)
|>
可以把`move`用到的坐标定义成一个变量`pos_r`，避免把同一个坐标输很多遍。这样的变量一般在`animation_presets.lua`中定义

<|
tint(gaotian, {0.5, 1, 0.5})
|>
`tint`也可以改变立绘的颜色

<|
env_tint(gaotian, color_sunset)
tint(gaotian, 1)
|>
还有一个函数`env_tint`，也用来改变立绘的颜色（不能用在普通图片上面）。这里的`color_sunset`也是定义在`animation_presets.lua`中的变量

<|
tint(gaotian, 0.5)
|>
`env_tint`与`tint`的效果可以叠加。`env_tint`一般用于黄昏、夜晚等环境引起的长时间的颜色变化，`tint`则用于短时间的演出效果

<|
move(gaotian, pos_c)
env_tint(gaotian, 1)
tint(gaotian, 1)
|>
好了，恢复立绘的位置和颜色

<|
move(cam, {1, 0})
|>
`move`还可以移动摄像机

顺便说一句：：目前我们用到的摄像机都是Hierarchy中的`MainCamera`，`MaskCamera`的用处以后再讲

顺便说一句：：目前的摄像机模式是orthographic，所以立绘和背景看起来像一整张图片一样移动。如果把摄像机改成perspective，就会有三维视差的效果

<|
move(cam, {1, 1, 6})
|>
注意，摄像机的坐标中的缩放参数控制的不是`Transform`中的`scale`，而是`Camera`中的`size`

顺便说一句：：如果摄像机的模式是perspective，缩放参数控制的则是`Camera.fieldOfView`

<|
move(cam, {0, 0, 5})
|>
恢复摄像机位置

<|
hide(gaotian)
|>
教程2 图像 到此结束
@<| jump_to 'tut03' |>
